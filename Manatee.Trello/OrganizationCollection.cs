using System;
using System.Threading;
using System.Threading.Tasks;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A collection of organizations.
	/// </summary>
	public class OrganizationCollection : ReadOnlyOrganizationCollection, IOrganizationCollection
	{
		internal OrganizationCollection(Func<string> getOwnerId, TrelloAuthorization auth)
			: base(getOwnerId, auth) {}

		/// <summary>
		/// Creates a new organization.
		/// </summary>
		/// <param name="displayName">The display name of the organization to add.</param>
		/// <param name="description">(Optional) A description of the organization.</param>
		/// <param name="name">(Optional) An org-name for the organization; like a member's username.  If omitted, Trello will generate it from <paramref name="displayName"/>.</param>
		/// <param name="ct">(Optional) A cancellation token for async processing.</param>
		/// <returns>The <see cref="IOrganization"/> generated by Trello.</returns>
		/// <remarks>The organization's name will be derived from the display name and can be changed later.</remarks>
		public async Task<IOrganization> Add(string displayName, string description = null, string name = null, CancellationToken ct = default)
		{
			var error = NotNullOrWhiteSpaceRule.Instance.Validate(null, displayName);
			if (error != null)
				throw new ValidationException<string>(displayName, new[] {error});
			if (name != null)
			{
				error = OrganizationNameRule.Instance.Validate(null, name);
				if (error != null)
					throw new ValidationException<string>(name, new[] { error });
			}

			var json = TrelloConfiguration.JsonFactory.Create<IJsonOrganization>();
			json.DisplayName = displayName;

			var endpoint = EndpointFactory.Build(EntityRequestType.Member_Write_CreateOrganization);
			var newData = await JsonRepository.Execute(Auth, endpoint, json, ct);

			return new Organization(newData, Auth);
		}
	}
}