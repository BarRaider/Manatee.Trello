using System;
using System.Threading;
using System.Threading.Tasks;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A collection of lists.
	/// </summary>
	public class ListCollection : ReadOnlyListCollection, IListCollection
	{
#pragma warning disable CS0809
		/// <summary>
		/// (Obsolete) Indicates the maximum number of items to return.
		/// </summary>
		[Obsolete("Trello does not support limiting lists.")]
		public override int? Limit { get; set; }
#pragma warning restore CS0809

		internal ListCollection(Func<string> getOwnerId, TrelloAuthorization auth)
			: base(getOwnerId, auth) { }

		/// <summary>
		/// Creates a new list.
		/// </summary>
		/// <param name="name">The name of the list to add.</param>
		/// <param name="position">(Optional) The position of the list.</param>
		/// <param name="ct">(Optional) A cancellation token for async processing.</param>
		/// <returns>The <see cref="IList"/> generated by Trello.</returns>
		public async Task<IList> Add(string name, Position position = null, CancellationToken ct = default)
		{
			var error = NotNullOrWhiteSpaceRule.Instance.Validate(null, name);
			if (error != null)
				throw new ValidationException<string>(name, new[] { error });

			var json = TrelloConfiguration.JsonFactory.Create<IJsonList>();
			json.Name = name;
			json.Board = TrelloConfiguration.JsonFactory.Create<IJsonBoard>();
			json.Board.Id = OwnerId;
			json.Pos = Position.GetJson(position);

			var endpoint = EndpointFactory.Build(EntityRequestType.Board_Write_AddList);
			var newData = await JsonRepository.Execute(Auth, endpoint, json, ct);

			return new List(newData, Auth);
		}
	}
}