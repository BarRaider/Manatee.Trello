using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

namespace Manatee.Trello
{
	/// <summary>
	/// Represents an attachment to a card.
	/// </summary>
	public interface IAttachment : ICacheable, IRefreshable
	{
		/// <summary>
		/// Gets the size of the attachment in bytes.
		/// </summary>
		int? Bytes { get; }

		/// <summary>
		/// Gets the creation date of the attachment.
		/// </summary>
		DateTime CreationDate { get; }

		/// <summary>
		/// Gets the date and time the attachment was added to a card.
		/// </summary>
		DateTime? Date { get; }

		/// <summary>
		/// Gets whether the attachment was uploaded data or attached by URI.
		/// </summary>
		bool? IsUpload { get; }

		/// <summary>
		/// Gets the <see cref="Member"/> who added the attachment.
		/// </summary>
		IMember Member { get; }

		/// <summary>
		/// Gets the MIME type of the attachment.
		/// </summary>
		string MimeType { get; }

		/// <summary>
		/// Gets or sets the name of the attachment.
		/// </summary>
		string Name { get; set; }

		/// <summary>
		/// Gets the collection of previews generated by Trello.
		/// </summary>
		IReadOnlyCollection<IImagePreview> Previews { get; }

		/// <summary>
		/// Gets the URI of the attachment.
		/// </summary>
		string Url { get; }

		/// <summary>
		/// Gets the color used as a border for the attachment preview on the card.
		/// </summary>
		WebColor EdgeColor { get; }

		/// <summary>
		/// Gets or sets the attachment's position.
		/// </summary>
		Position Position { get; set; }

		/// <summary>
		/// Raised when data on the attachment is updated.
		/// </summary>
		event Action<IAttachment, IEnumerable<string>> Updated;

		/// <summary>
		/// Deletes the attachment.
		/// </summary>
		/// <param name="ct">(Optional) A cancellation token for async processing.</param>
		/// <remarks>
		/// This permanently deletes the attachment from Trello's server, however, this object will remain in memory and all properties will remain accessible.
		/// </remarks>
		Task Delete(CancellationToken ct = default);
	}
}