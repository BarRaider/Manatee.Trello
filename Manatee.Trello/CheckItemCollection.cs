using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Manatee.Trello.Internal.DataAccess;
using Manatee.Trello.Internal.Synchronization;
using Manatee.Trello.Internal.Validation;
using Manatee.Trello.Json;

namespace Manatee.Trello
{
	/// <summary>
	/// A collection of checklist items.
	/// </summary>
	public class CheckItemCollection : ReadOnlyCheckItemCollection, ICheckItemCollection
	{
		internal CheckItemCollection(CheckListContext context, TrelloAuthorization auth)
			: base(context, auth) {}

		/// <summary>
		/// Creates a new checklist item.
		/// </summary>
		/// <param name="name">The name of the checklist item to add.</param>
		/// <param name="ct">(Optional) A cancellation token for async processing.</param>
		/// <returns>The <see cref="ICheckItem"/> generated by Trello.</returns>
		public async Task<ICheckItem> Add(string name, CancellationToken ct = default)
		{
			var error = NotNullOrWhiteSpaceRule.Instance.Validate(null, name);
			if (error != null)
				throw new ValidationException<string>(name, new[] {error});

			var json = TrelloConfiguration.JsonFactory.Create<IJsonCheckItem>();
			json.Name = name;

			var endpoint = EndpointFactory.Build(EntityRequestType.CheckList_Write_AddCheckItem, new Dictionary<string, object> {{"_id", OwnerId}});
			var newData = await JsonRepository.Execute(Auth, endpoint, json, ct);

			return new CheckItem(newData, OwnerId);
		}
	}
}